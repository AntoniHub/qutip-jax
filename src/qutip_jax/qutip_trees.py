from qutip import Qobj, QobjEvo
from jax import tree_util
from qutip.core.cy._element import _EvoElement, _ConstantElement
from qutip_jax.qobjevo import JaxJitCoeff


def qobj_tree_flatten(qobj):
    children = (qobj.to("jax").data,)
    aux_data = {
        "dims": qobj.dims,
        "type": qobj.type,
        "superrep": qobj.superrep,
        # Attribute that depend on the data are not safe to be set.
        "_isherm": None,
        "_isunitary": None,
    }
    return (children, aux_data)


def qobj_tree_unflatten(aux_data, children):
    out = Qobj.__new__(Qobj)
    out._data = children[0]
    print(type(out))
    for attr, val in aux_data.items():
        setattr(out, attr, val)
    return out


tree_util.register_pytree_node(
    Qobj, qobj_tree_flatten, qobj_tree_unflatten
)


def _ConstantElement_flatten(element):
    return (element.qobj(0),), {}


def _ConstantElement_unflatten(aux_data, children):
    return _ConstantElement(children[0])


tree_util.register_pytree_node(
    _ConstantElement, _ConstantElement_flatten, _ConstantElement_unflatten
)


def _EvoElement_flatten(element):
    qobj = element._qobj
    coeff = element._coefficient
    if isinstance(coeff, JaxJitCoeff):
        children = qobj, coeff
        aux_data = {}
    else:
        children = qobj,
        aux_data =  {"coefficient": element._coefficient}
    return children, aux_data


def _EvoElement_unflatten(aux_data, children):
    return _EvoElement(*children, **aux_data)


tree_util.register_pytree_node(
    _EvoElement, _EvoElement_flatten, _EvoElement_unflatten
)


def _QobjEvo_flatten(qevo):
    # reduce is automatically generated by cython.
    # Need to confirm the order is constant across version/OS.
    state = qevo.__reduce__()[2]
    children = state[4]
    aux_data = {
        "flags": state[:3],
        "dims": state[3],
        "shape": state[5],
        "superrep": state[6],
        "type": state[7],
    }
    return children, aux_data


def _QobjEvo_unflatten(aux_data, children):
    out = QobjEvo.__new__(QobjEvo)
    out.__setstate__((
        *aux_data["flags"],
        aux_data["dims"],
        children[0],
        aux_data["shape"],
        aux_data["superrep"],
        aux_data["type"],
    ))
    return out


tree_util.register_pytree_node(
    QobjEvo, _QobjEvo_flatten, _QobjEvo_unflatten
)
